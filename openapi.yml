openapi: '3.0.3'

info:
  title: 'Sample API'
  description: |
    # Features
    - Get reviews
    - Post review
  termsOfService: 'https://tastylog.com/terms'
  contact:
    name: 'Customer Support'
    url: 'https://tastylog.com/support/'
    email: 'support-desk@tastylog.com'
  license:
    name: 'MIT License'
    url: 'https://opensource.org/licenses/MIT'
  version: '1.0.0'

servers:
  - url: 'http://localhost:{port}'
    description: 'Local development'
    variables:
      port:
        enum: ['3000', '8080']
        default: '3000'
  - url: 'https://it1.tastylog.com'
    description: 'Integration Test'
  - url: 'https://stg.tastylog.com'
    description: 'Staging'
  - url: 'https://api.tastylog.com'
    description: 'Production'

tags: []

paths:
  /message:
    get:
      summary: 'Sample API get operation'
      description: 'Sample API get operation'
      responses:
        '200':
          description: 'Success operation'
          content:
            application/json:
              schema:
                type: string
                example: 'Hello World'
  /shops/{shopId}/reviews:
    get:
      summary: 'Get specified shop reviews'
      description: '(description): Get specified shop reviews'
      tags: ['shops']
      deprecated: false
      parameters:
        - name: shopId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: 'Success operation'
    post:
      summary: 'Create review'
      parameters:
        - name: shopId
          in: path
          required: true
          schema: { type: string }
          example: 'sample'
        - name: 'X-Api-Key'
          in: header
          description: "Request user's identifier"
          schema: { type: string }
          example: 'XXXX-XXXX-XXXX-XXXX'
        - name: token
          in: cookie
          description: 'One time token'
          schema: { type: string }
          example: 'XXXX-XXXX-XXXX-XXXX'
      requestBody:
        description: 'Contents of review'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score: { type: integer, example: 3 }
                comment: { type: string, example: 'Delicious' }
      responses:
        '201':
          description: 'Success operation'
          headers:
            location:
              description: 'New URL of created review'
              schema: { type: string, format: url }
        '400':
          description: 'Client side error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: string }
                  type: { type: string }
                  message: { type: string }
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field: { type: string }
                        code: { type: string }

security: []

components:
  schemas:
    SampleInt32:
      type: integer
      format: int32
    SampleDateString:
      type: string
      format: date-time
