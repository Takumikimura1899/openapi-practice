openapi: '3.0.3'

info:
  title: 'Sample API'
  description: |
    # Features
    - Get reviews
    - Post review
  termsOfService: 'https://tastylog.com/terms'
  contact:
    name: 'Customer Support'
    url: 'https://tastylog.com/support/'
    email: 'support-desk@tastylog.com'
  license:
    name: 'MIT License'
    url: 'https://opensource.org/licenses/MIT'
  version: '1.0.0'

servers:
  - url: 'http://localhost:{port}'
    description: 'Local development'
    variables:
      port:
        enum: ['3000', '8080']
        default: '3000'
  - url: 'https://it1.tastylog.com'
    description: 'Integration Test'
  - url: 'https://stg.tastylog.com'
    description: 'Staging'
  - url: 'https://api.tastylog.com'
    description: 'Production'

tags:
  - name: reviews
    description: 'Shop review operation'

paths:
  /message:
    get:
      summary: 'Sample API get operation'
      description: 'Sample API get operation'
      responses:
        '200':
          description: 'Success operation'
          content:
            application/json:
              schema:
                type: string
                example: 'Hello World'
  /shops/{shopId}/reviews:
    parameters:
      - $ref: '#/components/parameters/ShopId'
    get:
      summary: 'Get specified shop reviews'
      description: '(description): Get specified shop reviews'
      tags: ['reviews']
      deprecated: false
      responses:
        '200':
          description: 'Success operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    post:
      summary: 'Create review'
      tags: ['reviews']
      parameters:
        - name: 'X-Api-Key'
          in: header
          description: "Request user's identifier"
          schema: { type: string }
          example: 'XXXX-XXXX-XXXX-XXXX'
        - name: token
          in: cookie
          description: 'One time token'
          schema: { type: string }
          example: 'XXXX-XXXX-XXXX-XXXX'
      requestBody:
        description: 'Contents of review'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: 'Success operation'
          headers:
            location:
              description: 'New URL of created review'
              schema: { type: string, format: url }
        '400':
          $ref: '#/components/responses/400-BadRequest'

security: []

components:
  schemas:
    Review:
      type: object
      properties:
        score:
          type: integer
          enum: [1, 2, 3, 4, 5]
          example: 3
        comment: { type: string, example: 'Good!' }
    ClientError:
      type: object
      properties:
        code: { type: string }
        type: { type: string }
        message: { type: string }
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              code: { type: string }
  parameters:
    ShopId:
      name: shopId
      in: path
      description: 'Shop identifier'
      required: true
      schema: { type: string }
  responses:
    400-BadRequest:
      description: 'Client side error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
